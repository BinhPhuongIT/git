# Khi bạn cần tạo ra một Repo Git mà nó chỉ có chức năng lưu trữ - không có thư mục làm việc thì thực hiện lệnh:
git init --bare

# Lệnh git init được sử dưng để tạo, khởi tạo một kho chứa Git mới (Git Repo) ở local. Khi đang trong thư mục dự án chạy lệnh git init nó sẽ tạo ra một thư mục con (ẩn) tên .git, thư mục này chứa tất cả thông tin mô tả cho kho chứa dự án (Repo) mới - những thông tin này gọi là metadata gồm các thư mục như objects, refs ... Có một file tên HEAD cũng được tạo ra - nó trỏ đến commit hiện tại.
git init


# Đưa vào staging file index.html và file about.html
git add index.html about.html

# Đưa thư mục css (và file, thư mục con) vào staging
git add css

# Đưa vào vùng staging toàn bộ thư mục làm việc
git add --all
# Hoặc
git add -A
# Hoặc add [thư mục hiện tại]
git add .

# Thông tin trạng thái đầy đủ, chỉ tiết
git status
git status -s

#Lúc này trước các file có sự thay đổi có thể có các ký tự tương ứng với các thông tin gồm:
' ' = unmodified (không đổi)

M = modified (có sửa đổi)

A = added (file mới thêm)

D = deleted (file bị xóa)

R = renamed (đổi tên file)

C = copied (file copy từ file khác)

U = updated but unmerged (đã cập nhật, nhưng chưa merge)


# Lệnh commit cơ bản, đơn giản nhất là thực hiện với tham số -m để kèm dòng thông tin về commit
git commit -m "Ghi chú về commit"

# Khi cho tham số -a thì nó tương đương thực hiện lệnh git add để đưa các file đang được giám sát có sự thay đổi vào staging rồi tự động chạy git commit
git commit -a -m "Ghi chú về commit"

# Thay thế commit cuối bằng tham số --amend
git commit --amend -m "Thông tin về commit"


# Sử dụng lệnh git log xem lại lịch sử các commit trên git
git log
# Khi số lượng log nhiều, nó hiện thị trước một trang log, sau đó có dấu nhắc chờ lệnh để bạn điều hướng, tìm kiếm ... Để có trợ giúp về các lệnh này hãy nhấn h tại dấu nhắc lệnh
# Một số phím chức năng bạn có thể nhập đề điều hướng và tìm kiếm trong log như:
return - dòng tiếp theo
w - trang tiếp
spacebar - trang trước
q - thoát
?pattern - tìm kiếm, với pattern là mẫu tìm kiếm (keyword)
/pattern - giống ?pattern
n - đến vị trí tìm kiếm phía dưới
N - đến kết quả tìm kiếm phía trước

# Nếu chỉ muốn hiện thị một số commit log, ví dụ hiện thị log của 2 commit cuối thì cho thêm -2 vào lệnh
git log -2

# Nếu muốn hiện thị chi tiết các thay đổi của từng commit thì thêm vào tham số -p
git log -p -2

#Nếu hiện thị thống kế gọn hơn về sự thay đổi thì dùng tham số --stat, hoặc dạng ngắn gọn hơn là --shortstat
git log --stat -5

#Định dạng thông tin chung về commit (mã hash, dòng thông tin) trên một dòng thì dùng tham số --oneline
git log --oneline
git log --stat -10 --oneline

# Lọc kết quả với git log
# Lọc theo ngày bạn có thể dùng tham số --after="year-month-day" hoặc --before="year-month-day" hoặc dùng cả hai để chỉ ra khoảng ngày. Ví dụ: hiện thị các log từ ngày 1/1/2019 đến ngày 31/12/2019
git log --after="2019-1-1" --before="2019-12-31"

# Lọc theo người commit dùng tham số --author="tác giả", có thể kết hợp nhiều người bằng ký hiệu \|
git log --oneline --author="XuanThuLab"

# Lọc theo thông tin ghi chú về commit sử dụng thiết lập --grep="keyword ..."
git log --oneline --grep="init"

# Lọc các commit liên quan đến file cụ thể, sử dụng thiết lập -- rồi liệt kê các file
git log --oneline -- src/OAuth.php

# Lọc theo nội dung cập nhật sử dụng tham số -S"nội dung tìm"
git log --oneline --shortstat -S"sendmail"

# Lọc các commit bình thường (tham số --no-merges) và các commit do gộp nhánh (tham số --merges)
git log --merges

# Tự định dạng hiện thị
#Bạn có thể tùy chọn hiện thị dòng thông tin với tham số --pretty="format", trong đó chuỗi format là định dạng thông tin sẽ hiện thị ra cho từng commit, một số dữ liệu theo định dạng đó là:

%H mã hash đầy đủ của commit
%h mã hash ngắn gọn (7 ký tự đầu của hash đầy đủ)
%an tên người commit (định dạng theo --date, ví dụ --date="shortdate")
%s dòng thông tin commit
git log --pretty=format:"%h - %ad  %s" --date="short"
git log --graph --pretty="%h %ad %s" --date="short"

# Hiện thị log commit dạng đồ thị
#Bạn có thể xem lịch sự commit một cách trực quan của một nhánh, nhất là nhánh này trong lịch sử của nó có nhiều lần gộp nhánh
git log --graph --pretty="%h %ad %s" --date="short"

# Vài trường hợp sử dụng git diff
# Kiểm tra sự thay đổi thư mục làm việc
# Khi có sự thay đổi của thư mục làm việc mà chưa chỉ mục, thì có thể xem sự thay đổi của nó với commit cuối
git diff

# Kiểm tra sự thay đổi của index (staging) với commit cuối
git diff --staged

# Kiểm tra thay đổi giữa hai commit
git diff hash-commit1 hash-commit2

#Kiểm tra sự thay đổi của hai nhánh
git diff branch1 branch2

#sda